# Reference: https://pythontic.com/modules/socket/create_connection

import sys
import socket
import time

node_args_num = 3  # define the number of args that node should receive

'''Function send_message_tcp'''
'''
Description:
Use Pyton Socket to establish TCP link; The network node could send the message of events generated by the local generator.py program (stdin)
to the centralized node by tcp
Input: NodeName, addr, port
Ouput: None
Side effect: messages sent to the server node, send_status flag set to 0
'''
def send_message_tcp(NodeName, addr, port):
    s = socket.socket()
    
    # TCP connected
    s.connect((addr,port))

    # Sending messages by TCP transimission   
    # print the connected status
    # Do not send the connected and disconnected message because it will add the burden to do the processing on receiving data 
    check_connect = "{0} - {1} connected\n".format(time.time(),NodeName)
    print(check_connect)
    s.send(check_connect.encode("utf-8")) # Send connected status

    # Get the messages\events by the local generator and sent to the controlized node
    send_status = 1 # set the flag for the sending status 
    while (send_status):
        for item in sys.stdin:
            if len(item)!=0:
                col = item.split(" ")
                # print("col")
                t = col[0]
                msg = col[1]
                message="{0} {1} {2}".format(t,NodeName,msg)
                s.send(message.encode("utf-8"))
        
        check_disconnect = "{0} - {1} disconnected\n".format(time.time(),NodeName)
        print(check_disconnect)
        s.send(check_disconnect.encode("utf-8")) # Send disconnected status
            
        send_status = 0 # the sending transmission procedure is finished

    print("-------------Successfully Sent messages---------------\n")

    # TCP disconnected
    # s.close()
    

def main(argv=None):
    if argv is None:
        argv = sys.argv

    # Exit from the main func if not correct number of args are input by the command window    
    if len(argv)-1 != node_args_num :
        print("----------Node Args Error Occured!----------\n")
        print("The args input taken for node.py should be the form as: <node name> <IP address> <port number>\n")
        # sys.exit(1)
        return
    
    NodeName = argv[1]
    addr = argv[2] # IP address
    port = int(argv[3]) # Port Number
    # argv[0] is the name of program
    send_message_tcp(NodeName, addr, port)

if __name__ == "__main__":
    main()

